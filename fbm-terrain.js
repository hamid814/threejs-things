!function(){"use strict";var n,e={2122:function(n,e,o){var t=o(2212),r=o(2886),i="#define GLSLIFY 1\n#define NUM_OCTAVES 5\n\nuniform float uTime;\n\nvarying vec2 vUv;\nvarying vec3 vColor;\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid main() {\n  vUv = uv;\n  \n  vec2 st = vUv * 1.0;\n    // st += st * abs(sin(uTime*0.1)*3.0);\n    vec3 color = vec3(0.0);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( st + 0.00*uTime);\n    q.y = fbm( st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*uTime );\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*uTime );\n\n    float f = fbm(st+r);\n\n    color = mix(vec3(0.101961,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n\n  color = (f*f*f+.6*f*f+.5*f)*color;\n\n  vec3 newPos = position;\n  // newPos.x *= color.r;\n  // newPos.y *= color.g;\n  // newPos.z = color.r + color.g + color.b;\n\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(newPos, 1.0);\n\n  vColor = color;\n}",a=document.getElementById("webgl"),c=new t.WebGLRenderer({antialias:!0,canvas:a,preserveDrawingBuffer:!0});c.setSize(innerWidth,innerHeight),c.setClearColor(3355443),c.setPixelRatio(Math.min(2,devicePixelRatio));var v=new t.Scene,f=new t.PerspectiveCamera(45,innerWidth/innerHeight,.1,1e3);f.position.set(0,0,2),f.lookAt(0,0,0),new r.OrbitControls(f,c.domElement),v.add(new t.AxesHelper);var l=new t.PlaneGeometry(1,1,100,100),s=new t.ShaderMaterial({uniforms:{uTime:{value:0}},vertexShader:i,fragmentShader:"#define GLSLIFY 1\n#define NUM_OCTAVES 5\n\nuniform float uTime;\n\nvarying vec2 vUv;\nvarying vec3 vColor;\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid main() {\n  // vUv = uv;\n  \n  vec2 st = vUv * 1.0;\n    st += st * abs(sin(uTime*0.1)*3.0);\n    vec3 color = vec3(0.0);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( st + 0.00*uTime);\n    q.y = fbm( st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*uTime );\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*uTime );\n\n    float f = fbm(st+r);\n\n    color = mix(vec3(0.101961,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n\n  color = (f*f*f+.6*f*f+.5*f)*color;\n\n    // gl_FragColor = vec4(color,1.);\n    gl_FragColor = vec4(vColor, 1.0);\n}",side:2}),m=new t.ShaderMaterial({uniforms:{uTime:{value:0}},vertexShader:i,fragmentShader:"#define GLSLIFY 1\n#define NUM_OCTAVES 5\n\nuniform float uTime;\n\nvarying vec2 vUv;\nvarying vec3 vColor;\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid main() {\n  // vUv = uv;\n  \n  vec2 st = vUv * 1.0;\n    st += st * abs(sin(uTime*0.1)*3.0);\n    vec3 color = vec3(0.0);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( st + 0.00*uTime);\n    q.y = fbm( st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*uTime );\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*uTime);\n\n    float f = fbm(st+r);\n\n    color = mix(vec3(0.101961,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n\n  color = (f*f*f+.6*f*f+.5*f)*color;\n\n    gl_FragColor = vec4(color,1.);\n    // gl_FragColor = vec4(vColor, 1.0);\n}",side:2}),u=new t.Mesh(l,s),d=new t.Mesh(l,m);u.rotation.y=Math.PI,u.position.x=-.5,d.position.x=.5,v.add(u),v.add(d);var x=0;window.addEventListener("resize",(function(){var n=innerWidth,e=innerHeight;c.setSize(n,e),f.aspect=n/e,f.updateProjectionMatrix()})),document.addEventListener("keydown",(function(n){"p"===n.key&&function(){try{var n="image/jpeg",e=c.domElement.toDataURL(n),o=document.getElementsByTagName("script"),t=o[o.length-1],r=new URL(t.src).pathname.slice(1,-3);h(e.replace(n,b),r+".jpg")}catch(n){return void console.log(n)}}()}));var b="image/octet-stream",h=function(n,e){var o=document.createElement("a");"string"==typeof o.download?(document.body.appendChild(o),o.download=e,o.href=n,o.click(),document.body.removeChild(o)):location.replace(uri)};!function n(){c.render(v,f),u.material.uniforms.uTime.value=x,d.material.uniforms.uTime.value=x,x+=.03,requestAnimationFrame(n)}()}},o={};function t(n){var r=o[n];if(void 0!==r)return r.exports;var i=o[n]={exports:{}};return e[n](i,i.exports,t),i.exports}t.m=e,n=[],t.O=function(e,o,r,i){if(!o){var a=1/0;for(f=0;f<n.length;f++){o=n[f][0],r=n[f][1],i=n[f][2];for(var c=!0,v=0;v<o.length;v++)(!1&i||a>=i)&&Object.keys(t.O).every((function(n){return t.O[n](o[v])}))?o.splice(v--,1):(c=!1,i<a&&(a=i));c&&(n.splice(f--,1),e=r())}return e}i=i||0;for(var f=n.length;f>0&&n[f-1][2]>i;f--)n[f]=n[f-1];n[f]=[o,r,i]},t.d=function(n,e){for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},function(){var n={1818:0};t.O.j=function(e){return 0===n[e]};var e=function(e,o){var r,i,a=o[0],c=o[1],v=o[2],f=0;for(r in c)t.o(c,r)&&(t.m[r]=c[r]);if(v)var l=v(t);for(e&&e(o);f<a.length;f++)i=a[f],t.o(n,i)&&n[i]&&n[i][0](),n[a[f]]=0;return t.O(l)},o=self.webpackChunkthreejs_things=self.webpackChunkthreejs_things||[];o.forEach(e.bind(null,0)),o.push=e.bind(null,o.push.bind(o))}();var r=t.O(void 0,[2886,4967],(function(){return t(2122)}));r=t.O(r)}();