!function(){"use strict";var e,n={946:function(e,n,t){var o=t(2212),i=t(2886),r=document.getElementById("webgl"),v=new o.WebGLRenderer({antialias:!0,canvas:r,preserveDrawingBuffer:!0});v.setSize(innerWidth,innerHeight),v.setClearColor(13386803),v.setPixelRatio(Math.min(2,devicePixelRatio));var a=new o.Scene,c=new o.PerspectiveCamera(45,innerWidth/innerHeight,.1,1e3);c.position.set(0,3,3),c.lookAt(0,0,0),new i.OrbitControls(c,v.domElement);var g=1024,s=.4,f=new o.BufferGeometry,x=new o.ShaderMaterial({uniforms:{uTime:{value:0},totalP:{value:g}},vertexShader:"#define GLSLIFY 1\n#define PI 3.1415926538\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat noise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nuniform float uTime;\n\nvarying vec2 vUv;\nvarying float vNoiseR;\nvarying float vNoiseB;\n\nvoid main() {\n  vUv = uv;\n\n  mat2 sth = mat2(0.0, -1.0, 1.0, 0.0);\n\n  float time = uTime * 3.0;\n\n  float timeStep = 0.04;\n\n  float timeP1 = time + timeStep * 1.0;\n  float timeP2 = time + timeStep * 2.0;\n  float timeP3 = time + timeStep * 3.0;\n  \n  float timeN1 = time - timeStep * 1.0;\n  float timeN2 = time - timeStep * 2.0;\n  float timeN3 = time - timeStep * 3.0;\n  \n  vec2 continiuosUv = vUv - 0.5;\n  continiuosUv.x = abs(continiuosUv.x);\n  continiuosUv.y = abs(continiuosUv.y);\n  \n  vec2 noiseUv = continiuosUv * 4.0;\n\n  vec3 noiseField = vec3(noiseUv.x, noiseUv.y, 0.0);\n  \n  float r1 = 1.0 - smoothstep(0.0, 1.0, noise(vec3(noiseField + timeP1)));\n  float r2 = 1.0 - smoothstep(0.0, 1.0, noise(vec3(noiseField + timeP2)));\n  float r3 = 1.0 - smoothstep(0.0, 1.0, noise(vec3(noiseField + timeP3)));\n\n  float b1 = 1.0 - smoothstep(0.0, 1.0, noise(vec3(noiseField + timeN1)));\n  float b2 = 1.0 - smoothstep(0.0, 1.0, noise(vec3(noiseField + timeN2)));\n  float b3 = 1.0 - smoothstep(0.0, 1.0, noise(vec3(noiseField + timeN3)));\n\n  float r = r1 / 3.0 + r2 / 3.0 + r3 / 3.0;\n  float b = b1 / 3.0 + b2 / 3.0 + b3 / 3.0;\n\n  float finaleNoise = r + b;\n\n  vec3 pos = position;\n\n  pos += finaleNoise / 10.0;\n\n  vec4 modelViewPosition = viewMatrix * modelMatrix * vec4(pos, 1.0);\n  gl_Position = projectionMatrix * modelViewPosition;\n\n  vNoiseR = r;\n  vNoiseB = b;\n}",fragmentShader:"#define GLSLIFY 1\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat noise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nuniform float uTime;\n\nvarying vec2 vUv;\nvarying float vNoiseR;\nvarying float vNoiseB;\n\nvoid main() {\n  // float time = uTime * 2.5;\n\n  // float timeStep = 0.04;\n\n  // float timeP1 = time + timeStep * 1.0;\n  // float timeP2 = time + timeStep * 2.0;\n  // float timeP3 = time + timeStep * 3.0;\n  \n  // float timeN1 = time - timeStep * 1.0;\n  // float timeN2 = time - timeStep * 2.0;\n  // float timeN3 = time - timeStep * 3.0;\n  \n  // vec2 continiuosUv = vUv - 0.5;\n  // continiuosUv.x = abs(continiuosUv.x);\n  // continiuosUv.y = abs(continiuosUv.y);\n  \n  // vec2 noiseUv = continiuosUv * 3.0;\n\n  // vec3 noiseField = vec3(noiseUv.x, noiseUv.y, 0.0);\n  \n  // float r1 = 1.0 - step(noise(vec3(noiseField + timeP1)), 0.0);\n  // float r2 = 1.0 - step(noise(vec3(noiseField + timeP2)), 0.0);\n  // float r3 = 1.0 - step(noise(vec3(noiseField + timeP3)), 0.0);\n\n  // float b1 = 1.0 - step(noise(vec3(noiseField + timeN1)), 0.0);\n  // float b2 = 1.0 - step(noise(vec3(noiseField + timeN2)), 0.0);\n  // float b3 = 1.0 - step(noise(vec3(noiseField + timeN3)), 0.0);\n\n  // float r = r1 / 3.0 + r2 / 3.0 + r3 / 3.0;\n  // float b = b1 / 3.0 + b2 / 3.0 + b3 / 3.0;\n  \n  // gl_FragColor = vec4(r, b, b, 1.0);\n  // gl_FragColor = vec4(vUv.y, vUv.y, vUv.y, 1.0);\n  gl_FragColor = vec4(vNoiseR, vNoiseB, vNoiseB, 1.0);\n}",side:2}),y=new Float32Array(1843200),l=new Float32Array(1843200),m=new Float32Array(1228800),z=new o.BufferAttribute(y,3),d=new o.BufferAttribute(l,3),P=new o.BufferAttribute(m,2),u=Math.sin,p=Math.cos;function b(e){var n=new o.Matrix3;return n.set(p(e),-u(e),0,u(e),p(e),0,0,0,1),n}for(var w=0;w<g;w++)for(var h=w===g-1?0:w+1,_=2*Math.PI/g,S=p(w*_),F=u(w*_),U=0;U<100;U++){var N=99===U?0:U+1,Y=2*Math.PI/100,M=void 0,I=void 0,X=void 0,C=void 0;M=b(w*_),I=p(U*Y)*s+1,X=-.002,C=u(U*Y)*s;var O=new o.Vector3(I,X,C);O.applyMatrix3(M),M=b(w*_),I=p(N*Y)*s+1,X=-.002,C=u(N*Y)*s;var Z=new o.Vector3(I,X,C);Z.applyMatrix3(M),M=b(h*_),I=p(U*Y)*s+1,X=.002,C=u(U*Y)*s;var A=new o.Vector3(I,X,C);A.applyMatrix3(M),M=b(h*_),I=p(N*Y)*s+1,X=.002,C=u(N*Y)*s;var B=new o.Vector3(I,X,C);B.applyMatrix3(M);var j=6*(U+100*w);z.setXYZ(j,O.x,O.y,O.z),z.setXYZ(j+1,Z.x,Z.y,Z.z),z.setXYZ(j+2,A.x,A.y,A.z),z.setXYZ(j+3,Z.x,Z.y,Z.z),z.setXYZ(j+4,A.x,A.y,A.z),z.setXYZ(j+5,B.x,B.y,B.z),d.setXYZ(j,S,F,0),d.setXYZ(j+1,S,F,0),d.setXYZ(j+2,S,F,0),d.setXYZ(j+3,S,F,0),d.setXYZ(j+4,S,F,0),d.setXYZ(j+5,S,F,0),P.setXY(j,w/(g-1),U/99),P.setXY(j+1,w/(g-1),U/99),P.setXY(j+2,w/(g-1),U/99),P.setXY(j+3,w/(g-1),U/99),P.setXY(j+4,w/(g-1),U/99),P.setXY(j+5,w/(g-1),U/99)}f.setAttribute("position",z),f.setAttribute("aCenter",d),f.setAttribute("uv",P),console.log(f.attributes);var k=new o.Mesh(f,x);k.rotation.x=.5*Math.PI;var L=new o.TorusGeometry(1,.5,100,100),R=new o.Mesh(L,x);R.rotation.x=.5*Math.PI,a.add(R);var q=0;window.addEventListener("resize",(function(){var e=innerWidth,n=innerHeight;v.setSize(e,n),c.aspect=e/n,c.updateProjectionMatrix()})),document.addEventListener("keydown",(function(e){"p"===e.key&&function(){try{var e="image/jpeg",n=v.domElement.toDataURL(e);T(n.replace(e,E),"torus-bend.jpg")}catch(e){return void console.log(e)}}()}));var E="image/octet-stream",T=function(e,n){var t=document.createElement("a");"string"==typeof t.download?(document.body.appendChild(t),t.download=n,t.href=e,t.click(),document.body.removeChild(t)):location.replace(uri)};!function e(){v.render(a,c),k.material.uniforms.uTime.value=q,q+=.003,requestAnimationFrame(e)}()}},t={};function o(e){var i=t[e];if(void 0!==i)return i.exports;var r=t[e]={exports:{}};return n[e](r,r.exports,o),r.exports}o.m=n,e=[],o.O=function(n,t,i,r){if(!t){var v=1/0;for(g=0;g<e.length;g++){t=e[g][0],i=e[g][1],r=e[g][2];for(var a=!0,c=0;c<t.length;c++)(!1&r||v>=r)&&Object.keys(o.O).every((function(e){return o.O[e](t[c])}))?t.splice(c--,1):(a=!1,r<v&&(v=r));a&&(e.splice(g--,1),n=i())}return n}r=r||0;for(var g=e.length;g>0&&e[g-1][2]>r;g--)e[g]=e[g-1];e[g]=[t,i,r]},o.d=function(e,n){for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},function(){var e={2973:0};o.O.j=function(n){return 0===e[n]};var n=function(n,t){var i,r,v=t[0],a=t[1],c=t[2],g=0;for(i in a)o.o(a,i)&&(o.m[i]=a[i]);if(c)var s=c(o);for(n&&n(t);g<v.length;g++)r=v[g],o.o(e,r)&&e[r]&&e[r][0](),e[v[g]]=0;return o.O(s)},t=self.webpackChunkthreejs_things=self.webpackChunkthreejs_things||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))}();var i=o.O(void 0,[2886,1058],(function(){return o(946)}));i=o.O(i)}();