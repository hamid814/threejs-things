!function(){"use strict";var e,n={9853:function(e,n,o){var r=o(2212),t=o(2886),i=document.getElementById("webgl"),a=new r.WebGLRenderer({antialias:!0,canvas:i,preserveDrawingBuffer:!0});a.setSize(innerWidth,innerHeight),a.setClearColor(14531481),a.setPixelRatio(Math.min(2,devicePixelRatio));var c=new r.Scene,l=new r.PerspectiveCamera(45,innerWidth/innerHeight,.1,1e3);l.position.set(0,0,5),l.lookAt(0,0,0),c.add(new r.AxesHelper(4));var v=new r.PointLight;v.position.set(0,0,2),c.add(v),new t.OrbitControls(l,a.domElement);var g=(new r.CubeTextureLoader).load(["../../textures/cube/Bridge2/posx.jpg","../../textures/cube/Bridge2/negx.jpg","../../textures/cube/Bridge2/posy.jpg","../../textures/cube/Bridge2/negy.jpg","../../textures/cube/Bridge2/posz.jpg","../../textures/cube/Bridge2/negz.jpg"]),f=new r.IcosahedronGeometry(1,15),s=new r.ShaderMaterial({uniforms:{uTime:{value:0},viewPos:{value:l.position},worldTexture:{value:g},objectColor:{value:new r.Color(1,1,1)}},vertexShader:"#define GLSLIFY 1\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat noise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nuniform float uTime;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vWorldPosition;\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid main() {\n  float time = uTime / 3.0;\n  \n  float noiseValue = noise(position + time);\n  // noiseValue = abs(noiseValue);\n\n  float noiseAmp = map(noiseValue, 0.0, 1.0, 1.0, 1.5);\n\n  vec3 newPos = position * noiseAmp;\n  // vec3 newPos = position;\n  \n  vec4 modelPosition = modelMatrix * vec4(newPos, 1.0);\n  vec3 modelNormal = mat3(modelMatrix) * normal;\n  \n  gl_Position = projectionMatrix * viewMatrix * modelPosition;\n  \n  vUv = uv;\n  vNormal = modelNormal;\n  vWorldPosition = modelPosition.xyz;\n}",fragmentShader:"#define GLSLIFY 1\nuniform float uTime;\nuniform samplerCube worldTexture;\nuniform vec3 objectColor;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vWorldPosition;\n\nvec3 lightPos = vec3(0.0, 0.0, 3.0);\nvec3 lightColor = vec3(1.0, 0.95, 0.9);\n// vec3 lightColor = vec3(1.0, 1.0, 1.0);\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {  \n  vec3 lightDir = normalize(lightPos - vWorldPosition);\n\n  // flat shading\n  vec3 xTangent = dFdx(vWorldPosition);\n  vec3 yTangent = dFdy(vWorldPosition);\n  vec3 faceNormal = normalize(cross(xTangent, yTangent));\n\n  float diffuse = dot(lightDir, faceNormal);\n  diffuse = max(0.0, diffuse);\n\n  vec3 viewDir = normalize(cameraPosition - vWorldPosition);\n  vec3 specularLight = vec3(lightDir.x, lightDir.y, lightDir.z);\n  vec3 reflectionDir = reflect(-specularLight, faceNormal);\n\n  float specularStrength = 1.0;\n  float specular = dot(viewDir, -reflectionDir);\n  // specular = abs(specular);\n  specular = max(0.0, specular);\n  specular = pow(specular, 2.0);\n  \n  float mappedH = map(specular, 0.0, 1.0, -0.25, 0.6);\n  // float mappedH = map(specular, 0.0, 1.0, 0.6, 1.0);\n  float mappedV = map(specular, 0.0, 1.0, 0.0, 0.5);\n\n  vec3 finalSpecular = specularStrength * hsv2rgb(vec3(mappedH, 1.0, mappedV)) * lightColor;\n  // vec3 finalSpecular = specularStrength * specular * lightColor;\n  \n  vec3 finalLightColor = objectColor * (diffuse * 0.5 + finalSpecular * 1.5);\n\n  vec3 sampleDir = reflect(-cameraPosition, faceNormal);\n  // vec3 sampleDir = refract(cameraPosition, vNormal, 1.0);\n  vec3 envColor = textureCube(worldTexture, sampleDir).rgb;\n\n  vec3 finalColor = envColor * 0.9 + finalLightColor;\n\n  // gl_FragColor = vec4(finalColor, 1.0);\n  // gl_FragColor = vec4(envColor, 1.0);\n  gl_FragColor = vec4(finalLightColor, 1.0);\n  // gl_FragColor = vec4(finalSpecular, 1.0);\n}"});new r.MeshStandardMaterial({color:16777215,roughness:.7,metalness:.3,flatShading:!0}).onBeforeCompile=function(e){};var m=new r.Mesh(f,s);c.add(m);var u=0;window.addEventListener("resize",(function(){var e=innerWidth,n=innerHeight;a.setSize(e,n),l.aspect=e/n,l.updateProjectionMatrix()})),document.addEventListener("keydown",(function(e){"p"===e.key&&function(){try{var e="image/jpeg",n=a.domElement.toDataURL(e);x(n.replace(e,d),"sketch.jpg")}catch(e){return void console.log(e)}}()}));var d="image/octet-stream",x=function(e,n){var o=document.createElement("a");"string"==typeof o.download?(document.body.appendChild(o),o.download=n,o.href=e,o.click(),document.body.removeChild(o)):location.replace(uri)};!function e(){a.render(c,l),u+=.03,m.material.uniforms.uTime.value=u,requestAnimationFrame(e)}()}},o={};function r(e){var t=o[e];if(void 0!==t)return t.exports;var i=o[e]={exports:{}};return n[e](i,i.exports,r),i.exports}r.m=n,e=[],r.O=function(n,o,t,i){if(!o){var a=1/0;for(v=0;v<e.length;v++){o=e[v][0],t=e[v][1],i=e[v][2];for(var c=!0,l=0;l<o.length;l++)(!1&i||a>=i)&&Object.keys(r.O).every((function(e){return r.O[e](o[l])}))?o.splice(l--,1):(c=!1,i<a&&(a=i));c&&(e.splice(v--,1),n=t())}return n}i=i||0;for(var v=e.length;v>0&&e[v-1][2]>i;v--)e[v]=e[v-1];e[v]=[o,t,i]},r.d=function(e,n){for(var o in n)r.o(n,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},function(){var e={4425:0};r.O.j=function(n){return 0===e[n]};var n=function(n,o){var t,i,a=o[0],c=o[1],l=o[2],v=0;for(t in c)r.o(c,t)&&(r.m[t]=c[t]);if(l)var g=l(r);for(n&&n(o);v<a.length;v++)i=a[v],r.o(e,i)&&e[i]&&e[i][0](),e[a[v]]=0;return r.O(g)},o=self.webpackChunkthreejs_things=self.webpackChunkthreejs_things||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))}();var t=r.O(void 0,[2886,2074],(function(){return r(9853)}));t=r.O(t)}();