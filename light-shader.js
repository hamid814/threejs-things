!function(){"use strict";var e,n={9853:function(e,n,o){var i=o(2212),r=o(2886),t=document.getElementById("webgl"),a=new i.WebGLRenderer({antialias:!0,canvas:t,preserveDrawingBuffer:!0});a.setSize(innerWidth,innerHeight),a.setClearColor(14531481),a.setPixelRatio(Math.min(2,devicePixelRatio));var l=new i.Scene,c=new i.PerspectiveCamera(45,innerWidth/innerHeight,.1,1e3);c.position.set(0,0,5),c.lookAt(0,0,0),l.add(new i.AxesHelper(4));var v=new i.PointLight;v.position.set(0,0,2),l.add(v),new r.OrbitControls(c,a.domElement);var s=(new i.CubeTextureLoader).load(["../../textures/cube/Bridge2/posx.jpg","../../textures/cube/Bridge2/negx.jpg","../../textures/cube/Bridge2/posy.jpg","../../textures/cube/Bridge2/negy.jpg","../../textures/cube/Bridge2/posz.jpg","../../textures/cube/Bridge2/negz.jpg"]),p=new i.IcosahedronGeometry(1,15),m=new i.ShaderMaterial({uniforms:{uTime:{value:0},viewPos:{value:c.position},worldTexture:{value:s},objectColor:{value:new i.Color(1,1,1)}},vertexShader:"#define GLSLIFY 1\nvec4 permute(vec4 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\nfloat permute(float x) {\n  return floor(mod(((x * 34.0) + 1.0) * x, 289.0));\n}\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nfloat taylorInvSqrt(float r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip) {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p, s;\n\n  p.xyz = floor(fract(vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz * 2.0 - 1.0) * s.www;\n\n  return p;\n}\n\nfloat noise(vec4 v) {\n  const vec2 C = vec2(0.138196601125010504,  // (5 - sqrt(5))/20  G4\n  0.309016994374947451); // (sqrt(5) - 1)/4   F4\n// First corner\n  vec4 i = floor(v + dot(v, C.yyyy));\n  vec4 x0 = v - i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n\n  vec3 isX = step(x0.yzw, x0.xxx);\n  vec3 isYZ = step(x0.zww, x0.yyz);\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp(i0, 0.0, 1.0);\n  vec4 i2 = clamp(i0 - 1.0, 0.0, 1.0);\n  vec4 i1 = clamp(i0 - 2.0, 0.0, 1.0);\n\n  //  x0 = x0 - 0.0 + 0.0 * C \n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n// Permutations\n  i = mod(i, 289.0);\n  float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute(permute(permute(permute(i.w + vec4(i1.w, i2.w, i3.w, 1.0)) + i.z + vec4(i1.z, i2.z, i3.z, 1.0)) + i.y + vec4(i1.y, i2.y, i3.y, 1.0)) + i.x + vec4(i1.x, i2.x, i3.x, 1.0));\n// Gradients\n// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n  vec4 ip = vec4(1.0 / 294.0, 1.0 / 49.0, 1.0 / 7.0, 0.0);\n\n  vec4 p0 = grad4(j0, ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4, p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3, x3), dot(x4, x4)), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * (dot(m0 * m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2))) + dot(m1 * m1, vec2(dot(p3, x3), dot(p4, x4))));\n\n}\n\nuniform float uTime;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vWorldPosition;\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid main() {\n  float time = uTime / 1.0;\n\n  vec3 pos = position * 0.5;\n  pos.z += sin(time);\n  float noiseValue = noise(vec4(pos, cos(time)));\n  // float noiseValue = noise(position + time);\n  // noiseValue = abs(noiseValue);\n\n  float noiseAmp = map(noiseValue, 0.0, 1.0, 1.0, 1.5);\n\n  vec3 newPos = position * noiseAmp;\n  // vec3 newPos = position;\n\n  vec4 modelPosition = modelMatrix * vec4(newPos, 1.0);\n  vec3 modelNormal = mat3(modelMatrix) * normal;\n\n  gl_Position = projectionMatrix * viewMatrix * modelPosition;\n\n  vUv = uv;\n  vNormal = modelNormal;\n  vWorldPosition = modelPosition.xyz;\n}",fragmentShader:"#define GLSLIFY 1\nuniform float uTime;\nuniform samplerCube worldTexture;\nuniform vec3 objectColor;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vWorldPosition;\n\nvec3 lightPos = vec3(0.0, 0.0, 3.0);\nvec3 lightColor = vec3(1.0, 0.95, 0.9);\n// vec3 lightColor = vec3(1.0, 1.0, 1.0);\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n  vec3 lightDir = normalize(lightPos - vWorldPosition);\n\n  // flat shading\n  vec3 xTangent = dFdx(vWorldPosition);\n  vec3 yTangent = dFdy(vWorldPosition);\n  vec3 faceNormal = normalize(cross(xTangent, yTangent));\n\n  float diffuse = dot(lightDir, faceNormal);\n  diffuse = max(0.0, diffuse);\n\n  vec3 viewDir = normalize(cameraPosition - vWorldPosition);\n  vec3 specularLight = vec3(lightDir.x, lightDir.y, lightDir.z);\n  vec3 reflectionDir = reflect(-specularLight, faceNormal);\n\n  float specularStrength = 1.0;\n  float specular = dot(viewDir, -reflectionDir);\n  // specular = abs(specular);\n  specular = max(0.0, specular);\n  specular = pow(specular, 2.0);\n\n  float mappedH = map(specular, 0.0, 1.0, -0.25, 0.6);\n  // float mappedH = map(specular, 0.0, 1.0, 0.6, 1.0);\n  float mappedV = map(specular, 0.0, 1.0, 0.0, 0.5);\n\n  vec3 finalSpecular = specularStrength * hsv2rgb(vec3(mappedH, 1.0, mappedV)) * lightColor;\n  // vec3 finalSpecular = specularStrength * specular * lightColor;\n\n  vec3 finalLightColor = objectColor * (diffuse * 0.5 + finalSpecular * 1.5);\n\n  vec3 sampleDir = reflect(-cameraPosition, faceNormal);\n  // vec3 sampleDir = refract(cameraPosition, vNormal, 1.0);\n  vec3 envColor = textureCube(worldTexture, sampleDir).rgb;\n\n  vec3 finalColor = envColor * 0.9 + finalLightColor;\n\n  // gl_FragColor = vec4(finalColor, 1.0);\n  // gl_FragColor = vec4(envColor, 1.0);\n  gl_FragColor = vec4(finalLightColor, 1.0);\n  // gl_FragColor = vec4(finalSpecular, 1.0);\n}"});new i.MeshStandardMaterial({color:16777215,roughness:.7,metalness:.3,flatShading:!0}).onBeforeCompile=function(e){};var u=new i.Mesh(p,m);l.add(u);var x=0;window.addEventListener("resize",(function(){var e=innerWidth,n=innerHeight;a.setSize(e,n),c.aspect=e/n,c.updateProjectionMatrix()})),document.addEventListener("keydown",(function(e){"p"===e.key&&function(){try{var e="image/jpeg",n=a.domElement.toDataURL(e);f(n.replace(e,d),"sketch.jpg")}catch(e){return void console.log(e)}}()}));var d="image/octet-stream",f=function(e,n){var o=document.createElement("a");"string"==typeof o.download?(document.body.appendChild(o),o.download=n,o.href=e,o.click(),document.body.removeChild(o)):location.replace(uri)};!function e(){a.render(l,c),x+=.03,u.material.uniforms.uTime.value=x,requestAnimationFrame(e)}()}},o={};function i(e){var r=o[e];if(void 0!==r)return r.exports;var t=o[e]={exports:{}};return n[e](t,t.exports,i),t.exports}i.m=n,e=[],i.O=function(n,o,r,t){if(!o){var a=1/0;for(s=0;s<e.length;s++){o=e[s][0],r=e[s][1],t=e[s][2];for(var l=!0,c=0;c<o.length;c++)(!1&t||a>=t)&&Object.keys(i.O).every((function(e){return i.O[e](o[c])}))?o.splice(c--,1):(l=!1,t<a&&(a=t));if(l){e.splice(s--,1);var v=r();void 0!==v&&(n=v)}}return n}t=t||0;for(var s=e.length;s>0&&e[s-1][2]>t;s--)e[s]=e[s-1];e[s]=[o,r,t]},i.d=function(e,n){for(var o in n)i.o(n,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},i.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},function(){var e={4425:0};i.O.j=function(n){return 0===e[n]};var n=function(n,o){var r,t,a=o[0],l=o[1],c=o[2],v=0;if(a.some((function(n){return 0!==e[n]}))){for(r in l)i.o(l,r)&&(i.m[r]=l[r]);if(c)var s=c(i)}for(n&&n(o);v<a.length;v++)t=a[v],i.o(e,t)&&e[t]&&e[t][0](),e[t]=0;return i.O(s)},o=self.webpackChunkthreejs_things=self.webpackChunkthreejs_things||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))}();var r=i.O(void 0,[2886,4034],(function(){return i(9853)}));r=i.O(r)}();