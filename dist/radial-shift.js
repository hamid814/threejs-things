!function(){"use strict";var n,t={3614:function(n,t,e){var a=e(2212),o=e(5260),i=e(6426),r=e(5980),v=e(2886),c=new a.WebGLRenderer({antialias:!0});c.setSize(innerWidth,innerHeight),document.body.appendChild(c.domElement);var s=new a.Scene,l=new a.PerspectiveCamera(45,innerWidth/innerHeight,.1,1e3);l.position.set(0,0,5),l.lookAt(0,0,0),new v.OrbitControls(l,c.domElement).update();var f=new a.IcosahedronGeometry(1.4,1),g=new a.ShaderMaterial({uniforms:{time:{value:0}},vertexShader:"\n  uniform float time;\n\n  vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n  vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n  vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n  float noise(vec3 P){\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod(Pi0, 289.0);\n    Pi1 = mod(Pi1, 289.0);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.0;\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.0;\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 1.0 * n_xyz;\n  }\n\n  float map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n  }\n  \n  void main() {\n    float slowTime = time * 5.0;\n\n    vec3 p = position;\n    \n    float noiseFactor = (sin(slowTime * 0.2) * 4.0) + 2.0;\n    float noisePower = (cos(slowTime * 0.2 + 0.5) * 0.4) + 0.6;\n    \n    float noiseValue = noisePower * noise(vec3(p.x * noiseFactor + slowTime, p.y * noiseFactor + slowTime, p.z * noiseFactor + slowTime));\n    \n    float noiseAmp = map(noiseValue, 0.0, 1.0, 0.8, 1.2);\n    \n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position * noiseAmp * 1.5, 1.0);\n  }\n",fragmentShader:"\n  void main() {\n    gl_FragColor = vec4(vec3(1.0, 0.9, 0.0), 1.0);\n  }\n",side:2,wireframe:!0}),x=new a.Mesh(f,g);s.add(x);var d={uniforms:{tDiffuse:{value:null}},vertexShader:"\n    varying vec2 vUv;\n  \n    void main() {\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); \n\n      vUv = uv;\n    }\n  ",fragmentShader:"\n    #define PI 3.1415926538\n  \n    uniform sampler2D tDiffuse;\n    \n    varying vec2 vUv;\n\n    ".concat("\nmat3 rotation3dX(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat3(\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, c, s,\n\t\t0.0, -s, c\n\t);\n}\n  \nmat3 rotation3dY(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat3(\n\t\tc, 0.0, -s,\n\t\t0.0, 1.0, 0.0,\n\t\ts, 0.0, c\n\t);\n}\n\nmat3 rotation3dZ(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat3(\n\t\tc, s, 0.0,\n\t\t-s, c, 0.0,\n\t\t0.0, 0.0, 1.0\n\t);\n}\n\nmat4 rotation3d(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(\n\t\toc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n\t\t0.0,                                0.0,                                0.0,                                1.0\n\t);\n}\n\nmat2 rotation2d(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat2(\n\t\tc, -s,\n\t\ts, c\n\t);\n}\n\nvec3 rotateX(vec3 v, float angle) {\n\treturn rotation3dX(angle) * v;\n}\n\nvec3 rotateY(vec3 v, float angle) {\n\treturn rotation3dY(angle) * v;\n}\n\nvec3 rotateZ(vec3 v, float angle) {\n\treturn rotation3dZ(angle) * v;\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n\treturn (rotation3d(axis, angle) * vec4(v, 1.0)).xyz;\n}\n\nvec2 rotate(vec2 v, float angle) {\n\treturn rotation2d(angle) * v;\n}\n","\n  \n    vec2 rotateUV(vec2 uv, float rotation, vec2 mid)\n      {\n          return vec2(\n            cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\n            cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\n          );\n      }\n    \n    void main() {\n      float dist = distance(vUv, vec2(0.5));\n\n      float angle = atan(vUv.x - 0.5, vUv.y - 0.5);\n      angle /= PI * 2.0;\n      angle += 0.5;\n      angle *= 12.0;\n      if(mod(angle, 2.0) < 1.0) {\n        angle = mod(angle, 1.0);\n      } else {\n        angle = 1.0 - mod(angle, 1.0);\n      }\n      \n      vec2 arbUV = vec2(0.0, dist) + 0.5;\n\n      vec2 rotatedArbUV = rotateUV(arbUV, angle, vec2(0.5));\n\n      vec4 texel = texture2D( tDiffuse, rotatedArbUV );\n      \n      // gl_FragColor = vec4(vec3(dist), 1.0);\n      gl_FragColor = texel;\n    }\n  ")},m=new o.xC(c),u=new i.C(s,l);m.addPass(u);var y=new r.T(d);m.addPass(y);var z=new r.T({uniforms:{tDiffuse:{value:null},time:{value:0}},vertexShader:"\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}",fragmentShader:"\n\t\tuniform sampler2D tDiffuse;\n    uniform float time;\n\t\tvarying vec2 vUv;\n\n    float map(float value, float min1, float max1, float min2, float max2) {\n      return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n    }\n\n    float shift(float value, float shift, float max) {\n      return value < shift ? max - shift + value : value - shift;\n    }\n    \n\t\tvoid main() {\n      vec2 shiftedUv = vUv;\n\n      float numStep = 2.0;\n      \n      float dude = floor(vUv.y * 10.0) / 10.0 * sin(0.3 * 3.0);\n      float dude2 = floor(vUv.x * 10.0) / 10.0 * cos(0.3 * 3.0);\n      \n      shiftedUv.x = shift(shiftedUv.x, dude, 1.0);\n      shiftedUv.y = shift(shiftedUv.y, dude2, 1.0);\n      \n\t\t\tgl_FragColor = texture2D(tDiffuse, shiftedUv);\n\t\t}"});m.addPass(z),m.addPass(z),m.addPass(z),m.addPass(z),function n(){m.render(),x.rotation.x+=.003,x.rotation.y+=.001,x.rotation.z+=.001,requestAnimationFrame(n)}()}},e={};function a(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,a),i.exports}a.m=t,n=[],a.O=function(t,e,o,i){if(!e){var r=1/0;for(s=0;s<n.length;s++){e=n[s][0],o=n[s][1],i=n[s][2];for(var v=!0,c=0;c<e.length;c++)(!1&i||r>=i)&&Object.keys(a.O).every((function(n){return a.O[n](e[c])}))?e.splice(c--,1):(v=!1,i<r&&(r=i));v&&(n.splice(s--,1),t=o())}return t}i=i||0;for(var s=n.length;s>0&&n[s-1][2]>i;s--)n[s]=n[s-1];n[s]=[e,o,i]},a.d=function(n,t){for(var e in t)a.o(t,e)&&!a.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},a.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},function(){var n={799:0};a.O.j=function(t){return 0===n[t]};var t=function(t,e){var o,i,r=e[0],v=e[1],c=e[2],s=0;for(o in v)a.o(v,o)&&(a.m[o]=v[o]);if(c)var l=c(a);for(t&&t(e);s<r.length;s++)i=r[s],a.o(n,i)&&n[i]&&n[i][0](),n[r[s]]=0;return a.O(l)},e=self.webpackChunkthreejs_things=self.webpackChunkthreejs_things||[];e.forEach(t.bind(null,0)),e.push=t.bind(null,e.push.bind(e))}();var o=a.O(void 0,[2886,9407],(function(){return a(3614)}));o=a.O(o)}();