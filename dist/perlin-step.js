!function(){"use strict";var n,e={1925:function(n,e,t){var i=t(2212),o=t(2886),r=t(5260),v=t(6426),a=t(5980),c=new i.WebGLRenderer({antialias:!0});c.setSize(innerWidth,innerHeight),document.body.appendChild(c.domElement),c.setClearColor(16777215);var l=new i.Scene,s=new i.PerspectiveCamera(45,innerWidth/innerHeight,.1,1e3);s.position.set(0,0,5),s.lookAt(0,0,0),new o.OrbitControls(s,c.domElement).update();var m="\n// #define M_PI 3.1415926535897932384626433832795;\n\nvarying vec3 vPosition;\nvarying vec2 vUv;\nvarying float test;\nuniform float time;\n\nconst float PI = 3.1415926535897932384626433832795;\n\n".concat("\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nvec4 grad4(float j, vec4 ip){\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n\nfloat noise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nfloat noise(vec4 v){\n  const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\n// First corner\n  vec4 i  = floor(v + dot(v, C.yyyy) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C \n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n// Permutations\n  i = mod(i, 289.0); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n// Gradients\n// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n","\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid main() {\n  vUv = uv;\n  vPosition = position;\n \n  float timePower1 = (sin(2.0 * PI * time + 3.0 * PI / 2.0) + 1.0) / 2.0;\n  float timePower2 = (sin(2.0 * PI * time + 1.0 * PI / 2.0) + 1.0) / 2.0;\n  \n  float slowTime1 = floor(time);\n  float slowTime2 = floor(time + 10.5);\n\n  vec3 p = position;\n  \n  vec4 p11 = vec4(p.x * 1.0 + slowTime1, p.y * 1.0 + slowTime1, p.z * 1.0 + slowTime1, slowTime1);\n  vec4 p12 = vec4(p.x * 2.0 + slowTime1, p.y * 2.0 + slowTime1, p.z * 2.0 + slowTime1, slowTime1);\n  vec4 p13 = vec4(p.x * 4.0 + slowTime1, p.y * 4.0 + slowTime1, p.z * 4.0 + slowTime1, slowTime1);\n\n  vec4 p21 = vec4(p.x * 1.0 + slowTime2, p.y * 1.0 + slowTime2, p.z * 1.0 + slowTime2, slowTime2);\n  vec4 p22 = vec4(p.x * 2.0 + slowTime2, p.y * 2.0 + slowTime2, p.z * 2.0 + slowTime2, slowTime2);\n  vec4 p23 = vec4(p.x * 4.0 + slowTime2, p.y * 4.0 + slowTime2, p.z * 4.0 + slowTime2, slowTime2);\n  \n  float noiseValue1 = 1.0 * noise(p11) +  0.5 * noise(p12) + 0.25 * noise(p13);\n  noiseValue1 *= timePower1;\n  float noiseValue2 = 1.0 * noise(p21) +  0.5 * noise(p22) + 0.25 * noise(p23);\n  noiseValue2 *= timePower2;\n  \n  float noiseValue = noiseValue1 + noiseValue2;\n  \n  // float noiseValue = noise(vec3(p.x + slowTime, p.y, p.z)) * timePower1 + noise(vec3(p.x + slowTime2, p.y, p.z)) * timePower2;\n  \n  test = map(noiseValue, 0.0, 1.0, 1.0, 0.0);\n  // test = noiseValue;\n  \n  float noiseAmp = map(noiseValue, 0.0, 1.0, 1.0, 1.2);\n  \n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position * noiseAmp, 1.0);\n  }\n"),x=new i.IcosahedronGeometry(1.6,64),f=new i.ShaderMaterial({uniforms:{time:{value:500}},vertexShader:m,fragmentShader:"\n  varying float test;\n\n  void main() {\n    gl_FragColor = vec4(test, test / 2.0, 0.0, 1.0);\n  }\n"}),p=new i.Mesh(x,f);l.add(p);var g=new r.xC(c),u=new v.C(l,s);g.addPass(u);var y=new a.T({uniforms:{tDiffuse:{value:null},time:{value:0}},vertexShader:"\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}",fragmentShader:"\n\t\tuniform sampler2D tDiffuse;\n    uniform float time;\n\t\tvarying vec2 vUv;\n\n    float map(float value, float min1, float max1, float min2, float max2) {\n      return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n    }\n\n    float shift(float value, float shift, float max) {\n      return value < shift ? max - shift + value : value - shift;\n    }\n    \n\t\tvoid main() {\n      vec2 shiftedUv = vUv;\n\n      float numStep = 10.0;\n      \n      float shiftX = floor(vUv.y * numStep) / numStep * sin(time * 4.0);\n      float shiftY = floor(vUv.x * numStep) / numStep * cos(time * 4.0);\n      \n      shiftedUv.x = shift(shiftedUv.x, shiftX, 1.0);\n      shiftedUv.y = shift(shiftedUv.y, shiftY, 1.0);\n      \n\t\t\tgl_FragColor = texture2D(tDiffuse, shiftedUv);\n\t\t}"});y.enabled=!1,g.addPass(y);var d=new a.T({uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:"\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}",fragmentShader:"\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec2 vUv;\n\n    float map(float value, float min1, float max1, float min2, float max2) {\n      return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n    }\n    \n\t\tvoid main() {\n      vec2 doubleUv = vUv * 2.0;\n\n      if(vUv.x > 0.5) doubleUv.x = map(doubleUv.x - 1.0, 0.0, 1.0, 1.0, 0.0);\n      \n      if (vUv.y > 0.5) doubleUv.y = map(doubleUv.y - 1.0, 0.0, 1.0, 1.0, 0.0);\n\n\t\t\tgl_FragColor = texture2D(tDiffuse, doubleUv);\n\t\t}"});d.enabled=!1,g.addPass(d);var z=500;!function n(){z+=.006,p.material.uniforms.time.value=z,y.uniforms.time.value=z/2,g.render(),requestAnimationFrame(n)}()}},t={};function i(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,i),r.exports}i.m=e,n=[],i.O=function(e,t,o,r){if(!t){var v=1/0;for(l=0;l<n.length;l++){t=n[l][0],o=n[l][1],r=n[l][2];for(var a=!0,c=0;c<t.length;c++)(!1&r||v>=r)&&Object.keys(i.O).every((function(n){return i.O[n](t[c])}))?t.splice(c--,1):(a=!1,r<v&&(v=r));a&&(n.splice(l--,1),e=o())}return e}r=r||0;for(var l=n.length;l>0&&n[l-1][2]>r;l--)n[l]=n[l-1];n[l]=[t,o,r]},i.d=function(n,e){for(var t in e)i.o(e,t)&&!i.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},function(){var n={1026:0};i.O.j=function(e){return 0===n[e]};var e=function(e,t){var o,r,v=t[0],a=t[1],c=t[2],l=0;for(o in a)i.o(a,o)&&(i.m[o]=a[o]);if(c)var s=c(i);for(e&&e(t);l<v.length;l++)r=v[l],i.o(n,r)&&n[r]&&n[r][0](),n[v[l]]=0;return i.O(s)},t=self.webpackChunkthreejs_things=self.webpackChunkthreejs_things||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))}();var o=i.O(void 0,[2886,9407],(function(){return i(1925)}));o=i.O(o)}();